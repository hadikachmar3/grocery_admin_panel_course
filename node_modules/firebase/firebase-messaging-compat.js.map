{"version":3,"file":"firebase-messaging-compat.js","sources":["../util/src/environment.ts","../util/src/errors.ts","../util/src/compat.ts","../util/src/indexeddb.ts","../component/src/component.ts","../installations/src/util/constants.ts","../messaging/src/util/constants.ts","../messaging/src/interfaces/internal-message-payload.ts","../installations/src/util/errors.ts","../installations/src/functions/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/util/get-key.ts","../installations/src/helpers/fid-changed.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/functions/create-installation-request.ts","../installations/src/functions/generate-auth-token-request.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/api/get-token.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/functions/config.ts","../installations/src/api/get-id.ts","../installations/src/index.ts","../messaging/src/helpers/array-base64-translator.ts","../messaging/src/helpers/migrate-old-database.ts","../messaging/src/internals/idb-manager.ts","../messaging/src/util/errors.ts","../messaging/src/internals/requests.ts","../messaging/src/internals/token-manager.ts","../messaging/src/helpers/externalizePayload.ts","../messaging/src/helpers/logToFirelog.ts","../messaging/src/helpers/extract-app-config.ts","../messaging/src/messaging-service.ts","../messaging/src/helpers/registerDefaultSw.ts","../messaging/src/api/getToken.ts","../messaging/src/helpers/updateVapidKey.ts","../messaging/src/helpers/updateSwReg.ts","../messaging/src/helpers/logToScion.ts","../messaging/src/listeners/window-listener.ts","../messaging/src/helpers/is-console-message.ts","../messaging/src/helpers/register.ts","../messaging/src/api.ts","../messaging/src/api/deleteToken.ts","../messaging/src/api/onMessage.ts","../messaging/src/listeners/sw-listeners.ts","../messaging/src/helpers/sleep.ts","../messaging/src/api/onBackgroundMessage.ts","../messaging-compat/src/messaging-compat.ts","../messaging-compat/src/registerMessagingCompat.ts","../messaging-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\nfunction promisifyRequest(\n  request: IDBRequest,\n  errorMessage: string\n): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      resolve((event.target as IDBRequest).result);\n    };\n    request.onerror = event => {\n      reject(`${errorMessage}: ${(event.target as IDBRequest).error?.message}`);\n    };\n  });\n}\n\n/**\n * @internal\n */\nexport class DBWrapper {\n  objectStoreNames: DOMStringList;\n  constructor(private _db: IDBDatabase) {\n    this.objectStoreNames = this._db.objectStoreNames;\n  }\n  transaction(\n    storeNames: string[] | string,\n    mode: IDBTransactionMode = 'readonly'\n  ): TransactionWrapper {\n    return new TransactionWrapper(\n      this._db.transaction.call(this._db, storeNames, mode)\n    );\n  }\n  createObjectStore(\n    storeName: string,\n    options?: IDBObjectStoreParameters\n  ): ObjectStoreWrapper {\n    return new ObjectStoreWrapper(\n      this._db.createObjectStore(storeName, options)\n    );\n  }\n  close(): void {\n    this._db.close();\n  }\n}\n\n/**\n * @internal\n */\nclass TransactionWrapper {\n  complete: Promise<void>;\n  constructor(private _transaction: IDBTransaction) {\n    this.complete = new Promise((resolve, reject) => {\n      this._transaction.oncomplete = function () {\n        resolve();\n      };\n      this._transaction.onerror = () => {\n        reject(this._transaction.error);\n      };\n      this._transaction.onabort = () => {\n        reject(this._transaction.error);\n      };\n    });\n  }\n  objectStore(storeName: string): ObjectStoreWrapper {\n    return new ObjectStoreWrapper(this._transaction.objectStore(storeName));\n  }\n}\n\n/**\n * @internal\n */\nclass ObjectStoreWrapper {\n  constructor(private _store: IDBObjectStore) {}\n  index(name: string): IndexWrapper {\n    return new IndexWrapper(this._store.index(name));\n  }\n  createIndex(\n    name: string,\n    keypath: string,\n    options: IDBIndexParameters\n  ): IndexWrapper {\n    return new IndexWrapper(this._store.createIndex(name, keypath, options));\n  }\n  get(key: string): Promise<unknown> {\n    const request = this._store.get(key);\n    return promisifyRequest(request, 'Error reading from IndexedDB');\n  }\n  put(value: unknown, key?: string): Promise<unknown> {\n    const request = this._store.put(value, key);\n    return promisifyRequest(request, 'Error writing to IndexedDB');\n  }\n  delete(key: string): Promise<unknown> {\n    const request = this._store.delete(key);\n    return promisifyRequest(request, 'Error deleting from IndexedDB');\n  }\n  clear(): Promise<unknown> {\n    const request = this._store.clear();\n    return promisifyRequest(request, 'Error clearing IndexedDB object store');\n  }\n}\n\n/**\n * @internal\n */\nclass IndexWrapper {\n  constructor(private _index: IDBIndex) {}\n  get(key: string): Promise<unknown> {\n    const request = this._index.get(key);\n    return promisifyRequest(request, 'Error reading from IndexedDB');\n  }\n}\n\n/**\n * @internal\n */\nexport function openDB(\n  dbName: string,\n  dbVersion: number,\n  upgradeCallback: (\n    db: DBWrapper,\n    oldVersion: number,\n    newVersion: number | null,\n    transaction: TransactionWrapper\n  ) => void\n): Promise<DBWrapper> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onsuccess = event => {\n        resolve(new DBWrapper((event.target as IDBOpenDBRequest).result));\n      };\n\n      request.onerror = event => {\n        reject(\n          `Error opening indexedDB: ${\n            (event.target as IDBRequest).error?.message\n          }`\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        upgradeCallback(\n          new DBWrapper(request.result),\n          event.oldVersion,\n          event.newVersion,\n          new TransactionWrapper(request.transaction!)\n        );\n      };\n    } catch (e) {\n      reject(`Error opening indexedDB: ${e.message}`);\n    }\n  });\n}\n\n/**\n * @internal\n */\nexport async function deleteDB(dbName: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.deleteDatabase(dbName);\n      request.onsuccess = () => {\n        resolve();\n      };\n      request.onerror = event => {\n        reject(\n          `Error deleting indexedDB database \"${dbName}\": ${\n            (event.target as IDBRequest).error?.message\n          }`\n        );\n      };\n    } catch (e) {\n      reject(`Error deleting indexedDB database \"${dbName}\": ${e.message}`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBWrapper, openDB } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DBWrapper> | null = null;\nfunction getDbPromise(): Promise<DBWrapper> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, (db, oldVersion) => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (oldVersion) {\n        case 0:\n          db.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDB, openDB } from '@firebase/util';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDB(\n    OLD_DB_NAME,\n    OLD_DB_VERSION,\n    async (db, oldVersion, newVersion, upgradeTransaction) => {\n      if (oldVersion < 2) {\n        // Database too old, skip migration.\n        return;\n      }\n\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n        // Database did not exist. Nothing to do.\n        return;\n      }\n\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n\n      if (!value) {\n        // No entry in the database, nothing to migrate.\n        return;\n      }\n\n      if (oldVersion === 2) {\n        const oldDetails = value as V2TokenDetails;\n\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n          return;\n        }\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime ?? Date.now(),\n          subscriptionOptions: {\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey:\n              typeof oldDetails.vapidKey === 'string'\n                ? oldDetails.vapidKey\n                : arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 3) {\n        const oldDetails = value as V3TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 4) {\n        const oldDetails = value as V4TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      }\n    }\n  );\n  db.close();\n\n  // Delete all old databases.\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBWrapper, deleteDB, openDB } from '@firebase/util';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DBWrapper> | null = null;\nfunction getDbPromise(): Promise<DBWrapper> {\n  if (!dbPromise) {\n    dbPromise = openDB(\n      DATABASE_NAME,\n      DATABASE_VERSION,\n      (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    );\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = (await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key)) as TokenDetails;\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDB(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_SW_PATH, DEFAULT_SW_SCOPE } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\n\nexport async function registerDefaultSw(\n  messaging: MessagingService\n): Promise<void> {\n  try {\n    messaging.swRegistration = await navigator.serviceWorker.register(\n      DEFAULT_SW_PATH,\n      {\n        scope: DEFAULT_SW_SCOPE\n      }\n    );\n\n    // The timing when browser updates sw when sw has an update is unreliable from experiment. It\n    // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n    // is stuck with the old version. For example,\n    // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n    // sw if there was an update.\n    messaging.swRegistration.update().catch(() => {\n      /* it is non blocking and we don't care if it failed */\n    });\n  } catch (e) {\n    throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n      browserErrorMessage: e.message\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { getTokenInternal } from '../internals/token-manager';\nimport { updateSwReg } from '../helpers/updateSwReg';\nimport { updateVapidKey } from '../helpers/updateVapidKey';\nimport { GetTokenOptions } from '../interfaces/public-types';\n\nexport async function getToken(\n  messaging: MessagingService,\n  options?: GetTokenOptions\n): Promise<string> {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  if (Notification.permission === 'default') {\n    await Notification.requestPermission();\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  await updateVapidKey(messaging, options?.vapidKey);\n  await updateSwReg(messaging, options?.serviceWorkerRegistration);\n\n  return getTokenInternal(messaging);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY } from '../util/constants';\nimport { MessagingService } from '../messaging-service';\n\nexport async function updateVapidKey(\n  messaging: MessagingService,\n  vapidKey?: string | undefined\n): Promise<void> {\n  if (!!vapidKey) {\n    messaging.vapidKey = vapidKey;\n  } else if (!messaging.vapidKey) {\n    messaging.vapidKey = DEFAULT_VAPID_KEY;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { registerDefaultSw } from './registerDefaultSw';\n\nexport async function updateSwReg(\n  messaging: MessagingService,\n  swRegistration?: ServiceWorkerRegistration | undefined\n): Promise<void> {\n  if (!swRegistration && !messaging.swRegistration) {\n    await registerDefaultSw(messaging);\n  }\n\n  if (!swRegistration && !!messaging.swRegistration) {\n    return;\n  }\n\n  if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n  }\n\n  messaging.swRegistration = swRegistration;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport { MessagingService } from '../messaging-service';\n\nexport async function logToScion(\n  messaging: MessagingService,\n  messageType: MessageType,\n  data: ConsoleMessageData\n): Promise<void> {\n  const eventType = getEventType(messageType);\n  const analytics =\n    await messaging.firebaseDependencies.analyticsProvider.get();\n  analytics.logEvent(eventType, {\n    /* eslint-disable camelcase */\n    message_id: data[CONSOLE_CAMPAIGN_ID],\n    message_name: data[CONSOLE_CAMPAIGN_NAME],\n    message_time: data[CONSOLE_CAMPAIGN_TIME],\n    message_device_time: Math.floor(Date.now() / 1000)\n    /* eslint-enable camelcase */\n  });\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport { CONSOLE_CAMPAIGN_ANALYTICS_ENABLED } from '../util/constants';\nimport { MessagingService } from '../messaging-service';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { logToScion } from '../helpers/logToScion';\n\nexport async function messageEventListener(\n  messaging: MessagingService,\n  event: MessageEvent\n): Promise<void> {\n  const internalPayload = event.data as MessagePayloadInternal;\n\n  if (!internalPayload.isFirebaseMessaging) {\n    return;\n  }\n\n  if (\n    messaging.onMessageHandler &&\n    internalPayload.messageType === MessageType.PUSH_RECEIVED\n  ) {\n    if (typeof messaging.onMessageHandler === 'function') {\n      messaging.onMessageHandler(externalizePayload(internalPayload));\n    } else {\n      messaging.onMessageHandler.next(externalizePayload(internalPayload));\n    }\n  }\n\n  // Log to Scion if applicable\n  const dataPayload = internalPayload.data;\n  if (\n    isConsoleMessage(dataPayload) &&\n    dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n  ) {\n    await logToScion(messaging, internalPayload.messageType!, dataPayload);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { deleteTokenInternal } from '../internals/token-manager';\nimport { registerDefaultSw } from '../helpers/registerDefaultSw';\n\nexport async function deleteToken(\n  messaging: MessagingService\n): Promise<boolean> {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  if (!messaging.swRegistration) {\n    await registerDefaultSw(messaging);\n  }\n\n  return deleteTokenInternal(messaging);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  messaging.onMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onMessageHandler = null;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG } from '../util/constants';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport {\n  NotificationEvent,\n  PushEvent,\n  PushSubscriptionChangeEvent,\n  ServiceWorkerGlobalScope,\n  WindowClient\n} from '../util/sw-types';\nimport {\n  deleteTokenInternal,\n  getTokenInternal\n} from '../internals/token-manager';\n\nimport { MessagingService } from '../messaging-service';\nimport { dbGet } from '../internals/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\nimport { stageLog } from '../helpers/logToFirelog';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function onSubChange(\n  event: PushSubscriptionChangeEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const { newSubscription } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n\n  messaging.vapidKey =\n    tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nexport async function onPush(\n  event: PushEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nexport async function onNotificationClick(\n  event: NotificationEvent\n): Promise<void> {\n  const internalPayload: MessagePayloadInternal =\n    event.notification?.data?.[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link);\n\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...(internalPayload.notification as unknown as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onBackgroundMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp as AppCompat,\n  _FirebaseService\n} from '@firebase/app-compat';\nimport {\n  Messaging,\n  MessagePayload,\n  deleteToken,\n  getToken,\n  onMessage\n} from '@firebase/messaging';\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '@firebase/util';\n\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\n\nexport interface MessagingCompat {\n  getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string>;\n\n  deleteToken(): Promise<boolean>;\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n}\n\nexport function isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\n */\nfunction isWindowSupported(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSwSupported(): boolean {\n  return (\n    isIndexedDBAvailable() &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\nexport class MessagingCompatImpl implements MessagingCompat, _FirebaseService {\n  constructor(readonly app: AppCompat, readonly _delegate: Messaging) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { MessagingCompatImpl, isSupported } from './messaging-compat';\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-compat': MessagingCompatImpl;\n  }\n}\n\nconst messagingCompatFactory: InstanceFactory<'messaging-compat'> = (\n  container: ComponentContainer\n) => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging-sw').getImmediate()\n    );\n  } else {\n    // in window\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging').getImmediate()\n    );\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nexport function registerMessagingCompat(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'messaging-compat',\n      messagingCompatFactory,\n      ComponentType.PUBLIC\n    ).setServiceProps(NAMESPACE_EXPORTS)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name, version } from '../package.json';\n\nimport firebase from '@firebase/app-compat';\nimport { registerMessagingCompat } from './registerMessagingCompat';\nimport { MessagingCompat } from './messaging-compat';\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): MessagingCompat;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): MessagingCompat;\n  }\n}\n"],"names":["isIndexedDBAvailable","indexedDB","FirebaseError","Error","constructor","code","message","customData","super","this","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","fullMessage","getModularInstance","_delegate","promisifyRequest","request","errorMessage","Promise","resolve","reject","onsuccess","event","target","result","onerror","error","DBWrapper","_db","objectStoreNames","transaction","storeNames","mode","TransactionWrapper","call","createObjectStore","storeName","options","ObjectStoreWrapper","close","_transaction","complete","oncomplete","onabort","objectStore","_store","index","name","IndexWrapper","createIndex","keypath","get","put","delete","clear","_index","openDB","dbName","dbVersion","upgradeCallback","open","onupgradeneeded","oldVersion","newVersion","e","async","deleteDB","deleteDatabase","Component","instanceFactory","type","setInstantiationMode","instantiationMode","setMultipleInstances","multipleInstances","setServiceProps","props","serviceProps","setInstanceCreatedCallback","callback","onInstanceCreated","PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","MessageType","ERROR_FACTORY","missing-app-config-values","not-registered","installation-not-found","request-failed","app-offline","delete-pending-registration","isServerError","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","Date","now","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Content-Type","Accept","x-goog-api-key","getHeadersWithAuth","appConfig","refreshToken","headers","append","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","fid","b64String","array","b64","btoa","fromCharCode","bufferToBase64UrlSafe","substr","encode","test","getKey","appName","appId","fidChangeCallbacks","Map","fidChanged","callFidChangeCallbacks","channel","broadcastChannel","BroadcastChannel","onmessage","getBroadcastChannel","postMessage","size","broadcastFidChange","callbacks","OBJECT_STORE_NAME","dbPromise","getDbPromise","db","set","tx","oldValue","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","entryWithPromise","entry","updateInstallationRequest","waitUntilFidRegistration","navigator","onLine","registrationPromiseWithError","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","method","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","triggerRegistrationIfNecessary","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","updatedInstallationEntry","fetchAuthTokenFromServer","getToken","installationsImpl","getMissingValueError","valueName","INSTALLATIONS_NAME","publicFactory","app","container","getProvider","keyName","extractAppConfig","_getProvider","_delete","internalFactory","getId","catch","console","_registerComponent","DEFAULT_SW_PATH","DEFAULT_SW_SCOPE","DEFAULT_VAPID_KEY","ENDPOINT","CONSOLE_CAMPAIGN_ID","CONSOLE_CAMPAIGN_ANALYTICS_ENABLED","arrayToBase64","uint8Array","base64String","OLD_DB_NAME","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","databases","dbNames","map","tokenDetails","upgradeTransaction","contains","oldDetails","auth","p256dh","fcmToken","createTime","subscriptionOptions","swScope","vapidKey","length","checkTokenDetails","DATABASE_NAME","DATABASE_VERSION","upgradeDb","dbGet","firebaseDependencies","oldTokenDetails","dbSet","only-available-in-window","only-available-in-sw","permission-default","permission-blocked","unsupported-browser","indexed-db-unsupported","failed-service-worker-registration","token-subscribe-failed","token-subscribe-no-token","token-unsubscribe-failed","token-update-failed","token-update-no-token","use-sw-after-get-token","invalid-sw-registration","invalid-bg-handler","invalid-vapid-key","use-vapid-key-after-get-token","requestDeleteToken","unsubscribeOptions","getEndpoint","responseData","errorInfo","err","x-goog-firebase-installations-auth","getBody","web","applicationPubKey","TOKEN_EXPIRATION_MS","getTokenInternal","messaging","pushSubscription","swRegistration","subscription","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","base64","repeat","rawData","atob","outputArray","i","charCodeAt","base64ToArray","getPushSubscription","dbOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","scope","updatedToken","updateOptions","requestUpdateToken","updatedTokenDetails","deleteTokenInternal","updateToken","warn","getNewToken","dbRemove","unsubscribe","subscribeOptions","requestGetToken","externalizePayload","internalPayload","payload","analyticsLabel","from","collapseKey","collapse_key","messageId","fcmMessageId","messagePayloadInternal","notification","title","image","fcmOptions","link","analytics_label","_mergeStrings","s1","s2","resultArray","push","charAt","join","MessagingService","analyticsProvider","messagingSenderId","registerDefaultSw","serviceWorker","register","browserErrorMessage","Notification","permission","requestPermission","ServiceWorkerRegistration","updateSwReg","serviceWorkerRegistration","logToScion","messageType","eventType","NOTIFICATION_CLICKED","PUSH_RECEIVED","getEventType","analytics","logEvent","message_id","message_name","message_time","message_device_time","Math","floor","messageEventListener","dataPayload","isFirebaseMessaging","onMessageHandler","next","WindowMessagingFactory","addEventListener","WindowMessagingInternalFactory","deleteToken","_deleteToken","onMessage","nextOrObserver","_onMessage","registerVersion","FCM_MSG","SDK_PLATFORM_WEB","EVENT_MESSAGE_DELIVERED","stageLog","fcmEvent","project_number","instance_id","message_type","DISPLAY_NOTIFICATION","toString","DATA_MESSAGE","sdk_platform","package_name","origin","createFcmEvent","event_time_ms","source_extension_json_proto3","logEvents","createAndEnqueueLogEvent","onPush","getMessagePayloadInternal","deliveryMetricsExportedToBigQueryEnabled","clientList","getClientList","some","client","visibilityState","url","startsWith","sendMessagePayloadInternalToWindows","notificationPayloadInternal","actions","maxActions","registration","showNotification","wrappedInternalPayload","wrapInternalPayload","onBackgroundMessageHandler","onNotificationClick","action","stopImmediatePropagation","click_action","isConsoleMessage","location","getLink","URL","href","originUrl","host","clientUrl","getWindowClient","focus","clients","openWindow","matchAll","includeUncontrolled","SwMessagingFactory","waitUntil","newSubscription","onSubChange","onBackgroundMessage","document","_onBackgroundMessage","MessagingCompatImpl","_getToken","messagingCompatFactory","NAMESPACE_EXPORTS","isSupported","hasOwnProperty","PushSubscription","window","cookieEnabled","firebase","INTERNAL","registerComponent"],"mappings":"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"}